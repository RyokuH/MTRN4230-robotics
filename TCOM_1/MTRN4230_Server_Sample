MODULE MTRN4230_Server_Sample    

    ! The socket connected to the client.
    VAR socketdev client_socket;
    PERS string args{5};
    PERS bool flag := FALSE;
    ! The host and port that we will be listening for a connection on.
    !PERS string host := "192.168.125.1";
    CONST string host := "127.0.0.1";
    CONST num port := 1025;
    
    PROC Main ()
        !IF RobOS() THEN
        !    host := "192.168.125.1";
        !ELSE
        !    host := "127.0.0.1";
        !ENDIF
        MainServer;
        
    ENDPROC

    PROC MainServer()
        
        VAR string received_str;
        
        VAR num comma_pos_1;
        VAR num comma_pos_2;
        
        VAR num counter;
        VAR bool ok;
        
        ListenForAndAcceptConnection;
            
        ! Receive a string from the client.
        SocketReceive client_socket \Str:=received_str;
        
        ! Receive command, should be 5 chars long
        args{1} := StrPart(received_str,1,5);
        
        ! Start going through received arguments, separated by commas
        comma_pos_1 := 6;
        comma_pos_2:= StrFind(received_str,comma_pos_1+1,",");
        
        counter := 2;
        
        ! Loop while a comma is detected i.e. while we're not on the last argument
        WHILE comma_pos_2 <> StrLen(received_str)+1 DO
        
            !ok := StrToVal(StrPart(received_str,comma_pos_1+1,comma_pos_2-(comma_pos_1+1)), args{counter});
            args{counter} := StrPart(received_str,comma_pos_1+1,comma_pos_2-(comma_pos_1+1));
            comma_pos_1 := comma_pos_2;
            comma_pos_2:= StrFind(received_str,comma_pos_1+1,",");
            counter := counter + 1;
            
        ENDWHILE
        
        ! Save last argument
        args{counter} := StrPart(received_str,comma_pos_1+1,StrLen(received_str)-comma_pos_1);
        flag := TRUE;

        ! Send the string back to the client, adding a line feed character.
        SocketSend client_socket \Str:=(args{1} + args{2} + args{3} + "\0A");
        

        CloseConnection;
		
    ENDPROC

    PROC ListenForAndAcceptConnection()
        
        ! Create the socket to listen for a connection on.
        VAR socketdev welcome_socket;
        SocketCreate welcome_socket;
        
        ! Bind the socket to the host and port.
        SocketBind welcome_socket, host, port;
        
        ! Listen on the welcome socket.
        SocketListen welcome_socket;
        
        ! Accept a connection on the host and port.
        SocketAccept welcome_socket, client_socket \Time:=WAIT_MAX;
        
        ! Close the welcome socket, as it is no longer needed.
        SocketClose welcome_socket;
        
    ENDPROC
    
    ! Close the connection to the client.
    PROC CloseConnection()
        SocketClose client_socket;
    ENDPROC
    

ENDMODULE
